!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AD1_1	adc_arch.h	/^  AD1_1,$/;"	e	enum:adc1_channels
AD1_2	adc_arch.h	/^  AD1_2,$/;"	e	enum:adc1_channels
AD1_3	adc_arch.h	/^  AD1_3,$/;"	e	enum:adc1_channels
AD1_4	adc_arch.h	/^  AD1_4,$/;"	e	enum:adc1_channels
AD2_1	adc_arch.h	/^  AD2_1 = ADC1_END,$/;"	e	enum:adc2_channels
AD2_2	adc_arch.h	/^  AD2_2,$/;"	e	enum:adc2_channels
AD2_3	adc_arch.h	/^  AD2_3,$/;"	e	enum:adc2_channels
AD2_4	adc_arch.h	/^  AD2_4,$/;"	e	enum:adc2_channels
AD3_1	adc_arch.h	/^  AD3_1 = ADC2_END,$/;"	e	enum:adc3_channels
AD3_2	adc_arch.h	/^  AD3_2,$/;"	e	enum:adc3_channels
AD3_3	adc_arch.h	/^  AD3_3,$/;"	e	enum:adc3_channels
AD3_4	adc_arch.h	/^  AD3_4,$/;"	e	enum:adc3_channels
ADC1_END	adc_arch.h	/^  ADC1_END$/;"	e	enum:adc1_channels
ADC2_END	adc_arch.h	/^  ADC2_END$/;"	e	enum:adc2_channels
ADC3_END	adc_arch.h	/^  ADC3_END$/;"	e	enum:adc3_channels
ADC_ARCH_H	adc_arch.h	31;"	d
ADC_SAMPLE_TIME	adc_arch.c	108;"	d	file:
ADC_SAMPLE_TIME	adc_arch.c	110;"	d	file:
ADC_TIMER_FREQUENCY	adc_arch.c	164;"	d	file:
ADC_TIMER_PERIOD	adc_arch.c	155;"	d	file:
B100000	uart_arch.h	39;"	d
B115200	uart_arch.h	40;"	d
B1200	uart_arch.h	32;"	d
B19200	uart_arch.h	36;"	d
B230400	uart_arch.h	41;"	d
B2400	uart_arch.h	33;"	d
B38400	uart_arch.h	37;"	d
B4800	uart_arch.h	34;"	d
B57600	uart_arch.h	38;"	d
B921600	uart_arch.h	42;"	d
B9600	uart_arch.h	35;"	d
BIT_X_IS_SET_IN_REG	i2c_arch.c	61;"	d	file:
GPIO_ARCH_H	gpio_arch.h	32;"	d
I2C1_CLOCK_SPEED	i2c_arch.c	922;"	d	file:
I2C2_CLOCK_SPEED	i2c_arch.c	999;"	d	file:
I2C3_CLOCK_SPEED	i2c_arch.c	1072;"	d	file:
I2C_HW_H	i2c_arch.h	30;"	d
I2C_SR1_ERR_MASK	i2c_arch.c	51;"	d	file:
LED1_OFF	debug_led.h	/^static inline void LED1_OFF(void)$/;"	f
LED1_ON	debug_led.h	/^static inline void LED1_ON(void)$/;"	f
LED2_OFF	debug_led.h	/^static inline void LED2_OFF(void)$/;"	f
LED2_ON	debug_led.h	/^static inline void LED2_ON(void)$/;"	f
LED_ERROR	debug_led.h	/^static inline void LED_ERROR(uint8_t base, uint8_t nr)$/;"	f
LED_INIT	debug_led.h	/^static inline void LED_INIT(void)$/;"	f
LED_SHOW_ACTIVE_BITS	debug_led.h	/^static inline void LED_SHOW_ACTIVE_BITS(I2C_TypeDef *regs)$/;"	f
MCU_PERIPH_STM32_CAN_ARCH_H	can_arch.h	31;"	d
NVIC_ADC_IRQ_PRIO	adc_arch.c	104;"	d	file:
NVIC_I2C1_IRQ_PRIO	i2c_arch.c	75;"	d	file:
NVIC_I2C1_IRQ_PRIO	i2c_arch.c	79;"	d	file:
NVIC_I2C2_IRQ_PRIO	i2c_arch.c	76;"	d	file:
NVIC_I2C2_IRQ_PRIO	i2c_arch.c	80;"	d	file:
NVIC_I2C3_IRQ_PRIO	i2c_arch.c	77;"	d	file:
NVIC_I2C3_IRQ_PRIO	i2c_arch.c	81;"	d	file:
NVIC_SPI_IRQ_PRIO	spi_arch.c	69;"	d	file:
NVIC_USB_LP_CAN_RX0_IRQ_PRIO	can_arch.c	48;"	d	file:
NVIC_USB_LP_CAN_RX0_IRQ_PRIO	can_arch.c	50;"	d	file:
ONE_MHZ_CLK	pwm_input_arch.c	44;"	d	file:
PPRZ_I2C_SEND_START	i2c_arch.c	/^static inline void PPRZ_I2C_SEND_START(struct i2c_periph *periph)$/;"	f	file:
PPRZ_I2C_SEND_STOP	i2c_arch.c	/^static inline void PPRZ_I2C_SEND_STOP(uint32_t i2c)$/;"	f	file:
PWM_INPUT1	pwm_input_arch.h	/^  PWM_INPUT1,$/;"	e	enum:pwm_input_channels
PWM_INPUT2	pwm_input_arch.h	/^  PWM_INPUT2,$/;"	e	enum:pwm_input_channels
PWM_INPUT_ARCH_H	pwm_input_arch.h	31;"	d
PWM_INPUT_IRQ_PRIO	pwm_input_arch.c	46;"	d	file:
PWM_INPUT_IRQ_PRIO	pwm_input_arch.c	48;"	d	file:
PWM_INPUT_NB	pwm_input_arch.h	/^  PWM_INPUT_NB$/;"	e	enum:pwm_input_channels
PWM_INPUT_SIGNED_TICKS_OF_USEC	pwm_input_arch.h	57;"	d
PWM_INPUT_TICKS_OF_USEC	pwm_input_arch.h	56;"	d
PWM_INPUT_TICKS_PER_USEC	pwm_input_arch.h	53;"	d
RCC_TIM_ADC	adc_arch.c	412;"	d	file:
RCC_TIM_ADC	adc_arch.c	415;"	d	file:
RCC_TIM_ADC	adc_arch.c	418;"	d	file:
SPI_ARCH_H	spi_arch.h	31;"	d
STM32_UART_ARCH_H	uart_arch.h	30;"	d
STMI2CSubTransactionStatus	i2c_arch.c	/^enum STMI2CSubTransactionStatus {$/;"	g	file:
STMI2C_SubTra_Busy	i2c_arch.c	/^  STMI2C_SubTra_Busy,$/;"	e	enum:STMI2CSubTransactionStatus	file:
STMI2C_SubTra_Error	i2c_arch.c	/^  STMI2C_SubTra_Error$/;"	e	enum:STMI2CSubTransactionStatus	file:
STMI2C_SubTra_Ready	i2c_arch.c	/^  STMI2C_SubTra_Ready,$/;"	e	enum:STMI2CSubTransactionStatus	file:
STMI2C_SubTra_Ready_StopRequested	i2c_arch.c	/^  STMI2C_SubTra_Ready_StopRequested,$/;"	e	enum:STMI2CSubTransactionStatus	file:
SYS_TIME_ARCH_H	sys_time_arch.h	33;"	d
SpiSlaveSelect	spi_arch.c	/^static inline void SpiSlaveSelect(uint8_t slave)$/;"	f	file:
SpiSlaveUnselect	spi_arch.c	/^static inline void SpiSlaveUnselect(uint8_t slave)$/;"	f	file:
TIM_ADC	adc_arch.c	411;"	d	file:
TIM_ADC	adc_arch.c	414;"	d	file:
TIM_ADC	adc_arch.c	417;"	d	file:
UART1_BITS	uart_arch.c	209;"	d	file:
UART1_HW_FLOW_CONTROL	uart_arch.c	205;"	d	file:
UART1_PARITY	uart_arch.c	217;"	d	file:
UART1_STOP	uart_arch.c	213;"	d	file:
UART2_BITS	uart_arch.c	274;"	d	file:
UART2_HW_FLOW_CONTROL	uart_arch.c	270;"	d	file:
UART2_PARITY	uart_arch.c	282;"	d	file:
UART2_STOP	uart_arch.c	278;"	d	file:
UART3_BITS	uart_arch.c	339;"	d	file:
UART3_HW_FLOW_CONTROL	uart_arch.c	335;"	d	file:
UART3_PARITY	uart_arch.c	347;"	d	file:
UART3_STOP	uart_arch.c	343;"	d	file:
UART4_BITS	uart_arch.c	400;"	d	file:
UART4_PARITY	uart_arch.c	408;"	d	file:
UART4_STOP	uart_arch.c	404;"	d	file:
UART5_BITS	uart_arch.c	452;"	d	file:
UART5_PARITY	uart_arch.c	460;"	d	file:
UART5_STOP	uart_arch.c	456;"	d	file:
UART6_BITS	uart_arch.c	508;"	d	file:
UART6_HW_FLOW_CONTROL	uart_arch.c	504;"	d	file:
UART6_PARITY	uart_arch.c	516;"	d	file:
UART6_STOP	uart_arch.c	512;"	d	file:
UART_SPEED	uart_arch.h	43;"	d
USEC_OF_PWM_INPUT_TICKS	pwm_input_arch.h	58;"	d
USE_AD1	adc_arch.c	117;"	d	file:
USE_AD2	adc_arch.c	123;"	d	file:
USE_AD3	adc_arch.c	131;"	d	file:
USE_AD3	adc_arch.c	137;"	d	file:
USE_AD3	adc_arch.c	138;"	d	file:
USE_OCM3_SYSTICK_INIT	sys_time_arch.c	39;"	d	file:
USE_UART1_RX	uart_arch.c	201;"	d	file:
USE_UART1_TX	uart_arch.c	198;"	d	file:
USE_UART2_RX	uart_arch.c	266;"	d	file:
USE_UART2_TX	uart_arch.c	263;"	d	file:
USE_UART3_RX	uart_arch.c	331;"	d	file:
USE_UART3_TX	uart_arch.c	328;"	d	file:
USE_UART4_RX	uart_arch.c	396;"	d	file:
USE_UART4_TX	uart_arch.c	393;"	d	file:
USE_UART5_RX	uart_arch.c	448;"	d	file:
USE_UART5_TX	uart_arch.c	445;"	d	file:
USE_UART6_RX	uart_arch.c	500;"	d	file:
USE_UART6_TX	uart_arch.c	497;"	d	file:
WD_DELAY	i2c_arch.c	1244;"	d	file:
WD_RECOVERY_TICKS	i2c_arch.c	1245;"	d	file:
__I2C_REG_CRITICAL_ZONE_START	i2c_arch.c	70;"	d	file:
__I2C_REG_CRITICAL_ZONE_STOP	i2c_arch.c	71;"	d	file:
__disable_irq	i2c_arch.c	/^static inline void __disable_irq(void)  { asm volatile("cpsid i"); }$/;"	f	file:
__enable_irq	i2c_arch.c	/^static inline void __enable_irq(void)   { asm volatile("cpsie i"); }$/;"	f	file:
adc	adc_arch.c	/^  uint32_t adc;$/;"	m	struct:__anon1	file:
adc1_2_isr	adc_arch.c	/^void adc1_2_isr(void)$/;"	f
adc1_buffers	adc_arch.c	/^static struct adc_buf *adc1_buffers[4];$/;"	v	typeref:struct:adc_buf	file:
adc1_channels	adc_arch.h	/^enum adc1_channels {$/;"	g
adc2_buffers	adc_arch.c	/^static struct adc_buf *adc2_buffers[4];$/;"	v	typeref:struct:adc_buf	file:
adc2_channels	adc_arch.h	/^enum adc2_channels {$/;"	g
adc3_buffers	adc_arch.c	/^static struct adc_buf *adc3_buffers[4];$/;"	v	typeref:struct:adc_buf	file:
adc3_channels	adc_arch.h	/^enum adc3_channels {$/;"	g
adc_buf_channel	adc_arch.c	/^void adc_buf_channel(uint8_t adc_channel, struct adc_buf *s, uint8_t av_nb_sample)$/;"	f
adc_init	adc_arch.c	/^void adc_init(void)$/;"	f
adc_init_irq	adc_arch.c	/^static inline void adc_init_irq(void)$/;"	f	file:
adc_init_rcc	adc_arch.c	/^static inline void adc_init_rcc(void)$/;"	f	file:
adc_init_single	adc_arch.c	/^static inline void adc_init_single(uint32_t adc, uint8_t nb_channels, uint8_t *channel_map)$/;"	f	file:
adc_push_sample	adc_arch.c	/^static inline void adc_push_sample(struct adc_buf *buf, uint16_t value)$/;"	f	file:
adc_watchdog	adc_arch.c	/^} adc_watchdog;$/;"	v	typeref:struct:__anon1	file:
adc_watchdog_callback	adc_arch.h	/^typedef void (*adc_watchdog_callback)(void);$/;"	t
br	spi_arch.c	/^  uint32_t br;       \/\/\/< baudrate (clock divider)$/;"	m	struct:locm3_spi_comm	file:
can_hw_init	can_arch.c	/^void can_hw_init(void)$/;"	f
can_hw_transmit	can_arch.c	/^int can_hw_transmit(uint32_t id, const uint8_t *buf, uint8_t len)$/;"	f
can_initialized	can_arch.c	/^bool can_initialized = false;$/;"	v
cb	adc_arch.c	/^  adc_watchdog_callback cb;$/;"	m	struct:__anon1	file:
comm	spi_arch.c	/^  struct locm3_spi_comm comm;      \/\/\/< current communication paramters$/;"	m	struct:spi_periph_dma	typeref:struct:spi_periph_dma::locm3_spi_comm	file:
comm_sig	spi_arch.c	/^  uint8_t  comm_sig;               \/\/\/< comm config signature used to check for changes$/;"	m	struct:spi_periph_dma	file:
cpha	spi_arch.c	/^  uint32_t cpha;     \/\/\/< clock phase$/;"	m	struct:locm3_spi_comm	file:
cpol	spi_arch.c	/^  uint32_t cpol;     \/\/\/< clock polarity$/;"	m	struct:locm3_spi_comm	file:
dff	spi_arch.c	/^  uint32_t dff;      \/\/\/< data frame format 8\/16 bits$/;"	m	struct:locm3_spi_comm	file:
dma	spi_arch.c	/^  uint32_t dma;                    \/\/\/< DMA controller base address (DMA1 or DMA2)$/;"	m	struct:spi_periph_dma	file:
dma1_channel2_isr	spi_arch.c	/^void dma1_channel2_isr(void) {$/;"	f
dma1_channel2_isr	spi_arch.c	/^void dma1_channel2_isr(void)$/;"	f
dma1_channel3_isr	spi_arch.c	/^void dma1_channel3_isr(void) {$/;"	f
dma1_channel4_isr	spi_arch.c	/^void dma1_channel4_isr(void) {$/;"	f
dma1_channel5_isr	spi_arch.c	/^void dma1_channel5_isr(void) {$/;"	f
dma2_channel1_isr	spi_arch.c	/^void dma2_channel1_isr(void) {$/;"	f
dma2_channel2_isr	spi_arch.c	/^void dma2_channel2_isr(void) {$/;"	f
get_comm_signature	spi_arch.c	/^static uint8_t get_comm_signature(struct locm3_spi_comm *c)$/;"	f	file:
get_sys_time_msec	sys_time_arch.h	/^static inline uint32_t get_sys_time_msec(void)$/;"	f
get_sys_time_usec	sys_time_arch.h	/^static inline uint32_t get_sys_time_usec(void)$/;"	f
get_transaction_signature	spi_arch.c	/^static inline uint8_t get_transaction_signature(struct spi_transaction *t)$/;"	f	file:
gpio_enable_clock	gpio_arch.c	/^void gpio_enable_clock(uint32_t port)$/;"	f
gpio_setup_input	gpio_arch.c	/^void gpio_setup_input(uint32_t port, uint16_t gpios)$/;"	f
gpio_setup_input_pulldown	gpio_arch.c	/^void gpio_setup_input_pulldown(uint32_t port, uint16_t gpios)$/;"	f
gpio_setup_input_pullup	gpio_arch.c	/^void gpio_setup_input_pullup(uint32_t port, uint16_t gpios)$/;"	f
gpio_setup_output	gpio_arch.c	/^void gpio_setup_output(uint32_t port, uint16_t gpios)$/;"	f
gpio_setup_pin_af	gpio_arch.c	/^void gpio_setup_pin_af(uint32_t port, uint16_t pin, uint32_t af, bool_t is_output)$/;"	f
gpio_setup_pin_af	gpio_arch.c	/^void gpio_setup_pin_af(uint32_t port, uint16_t pin, uint8_t af, bool_t is_output __attribute__((unused)))$/;"	f
gpio_setup_pin_analog	gpio_arch.c	/^void gpio_setup_pin_analog(uint32_t port, uint16_t pin)$/;"	f
i2c1_er_isr	i2c_arch.c	/^void i2c1_er_isr(void)$/;"	f
i2c1_ev_isr	i2c_arch.c	/^void i2c1_ev_isr(void)$/;"	f
i2c2_er_isr	i2c_arch.c	/^void i2c2_er_isr(void)$/;"	f
i2c2_ev_isr	i2c_arch.c	/^void i2c2_ev_isr(void)$/;"	f
i2c3_er_isr	i2c_arch.c	/^void i2c3_er_isr(void)$/;"	f
i2c3_ev_isr	i2c_arch.c	/^void i2c3_ev_isr(void)$/;"	f
i2c_error	i2c_arch.c	/^static inline void i2c_error(struct i2c_periph *periph)$/;"	f	file:
i2c_event	i2c_arch.c	/^void i2c_event(void)$/;"	f
i2c_idle	i2c_arch.c	/^bool_t i2c_idle(struct i2c_periph *periph)$/;"	f
i2c_irq	i2c_arch.c	/^static inline void i2c_irq(struct i2c_periph *periph)$/;"	f	file:
i2c_scl_set	i2c_arch.c	/^static inline void i2c_scl_set(uint32_t i2c)$/;"	f	file:
i2c_scl_toggle	i2c_arch.c	/^static inline void i2c_scl_toggle(uint32_t i2c)$/;"	f	file:
i2c_sda_get	i2c_arch.c	/^static inline bool_t i2c_sda_get(uint32_t i2c)$/;"	f	file:
i2c_setbitrate	i2c_arch.c	/^void i2c_setbitrate(struct i2c_periph *periph, int bitrate)$/;"	f
i2c_setup_gpio	i2c_arch.c	/^static void i2c_setup_gpio(uint32_t i2c)$/;"	f	file:
i2c_submit	i2c_arch.c	/^bool_t i2c_submit(struct i2c_periph *periph, struct i2c_transaction *t)$/;"	f
i2c_wd_check	i2c_arch.c	/^static void i2c_wd_check(struct i2c_periph *periph)$/;"	f	file:
locm3_spi_comm	spi_arch.c	/^struct locm3_spi_comm {$/;"	s	file:
lsbfirst	spi_arch.c	/^  uint32_t lsbfirst; \/\/\/< frame format lsb\/msb first$/;"	m	struct:locm3_spi_comm	file:
nb_adc1_channels	adc_arch.c	/^static uint8_t nb_adc1_channels = 0;$/;"	v	file:
nb_adc2_channels	adc_arch.c	/^static uint8_t nb_adc2_channels = 0;$/;"	v	file:
nb_adc3_channels	adc_arch.c	/^static uint8_t nb_adc3_channels = 0;$/;"	v	file:
process_rx_dma_interrupt	spi_arch.c	/^void process_rx_dma_interrupt(struct spi_periph * periph) {$/;"	f
process_slave_rx_dma_interrupt	spi_arch.c	/^void process_slave_rx_dma_interrupt(struct spi_periph * periph) {$/;"	f
process_tx_dma_interrupt	spi_arch.c	/^void process_tx_dma_interrupt(struct spi_periph * periph) {$/;"	f
pwm_input_channels	pwm_input_arch.h	/^enum pwm_input_channels {$/;"	g
pwm_input_init	pwm_input_arch.c	/^void pwm_input_init(void)$/;"	f
pwm_input_set_timer	pwm_input_arch.c	/^static inline void pwm_input_set_timer(uint32_t tim)$/;"	f	file:
rcc_dma	spi_arch.c	/^  uint32_t rcc_dma;                \/\/\/< RCC DMA enable clock pin (RCC_DMA1 or RCC_DMA2)$/;"	m	struct:spi_periph_dma	file:
register_adc_watchdog	adc_arch.c	/^void register_adc_watchdog(uint32_t adc, uint8_t chan, uint16_t low, uint16_t high, adc_watchdog_callback cb)$/;"	f
rx_chan	spi_arch.c	/^  uint8_t  rx_chan;                \/\/\/< receive DMA channel (or stream on F4) number$/;"	m	struct:spi_periph_dma	file:
rx_chan_sel	spi_arch.c	/^  uint32_t rx_chan_sel;            \/\/\/< F4 only: actual receive DMA channel number$/;"	m	struct:spi_periph_dma	file:
rx_dummy_buf	spi_arch.c	/^  uint16_t rx_dummy_buf;           \/\/\/< dummy rx buffer for receive only cases$/;"	m	struct:spi_periph_dma	file:
rx_extra_dummy_dma	spi_arch.c	/^  bool_t rx_extra_dummy_dma;       \/\/\/< extra rx dummy dma flag for tx_len > rx_len$/;"	m	struct:spi_periph_dma	file:
rx_nvic_irq	spi_arch.c	/^  uint8_t  rx_nvic_irq;            \/\/\/< receive interrupt$/;"	m	struct:spi_periph_dma	file:
set_comm_from_transaction	spi_arch.c	/^static void set_comm_from_transaction(struct locm3_spi_comm *c, struct spi_transaction *t)$/;"	f	file:
set_default_comm_config	spi_arch.c	/^static void set_default_comm_config(struct locm3_spi_comm *c)$/;"	f	file:
spi	spi_arch.c	/^  uint32_t spi;                    \/\/\/< SPI peripheral identifier$/;"	m	struct:spi_periph_dma	file:
spi1_arch_init	spi_arch.c	/^void spi1_arch_init(void)$/;"	f
spi1_dma	spi_arch.c	/^static struct spi_periph_dma spi1_dma;$/;"	v	typeref:struct:spi_periph_dma	file:
spi1_slave_arch_init	spi_arch.c	/^void spi1_slave_arch_init(void) {$/;"	f
spi2_arch_init	spi_arch.c	/^void spi2_arch_init(void)$/;"	f
spi2_dma	spi_arch.c	/^static struct spi_periph_dma spi2_dma;$/;"	v	typeref:struct:spi_periph_dma	file:
spi2_slave_arch_init	spi_arch.c	/^void spi2_slave_arch_init(void) {$/;"	f
spi3_arch_init	spi_arch.c	/^void spi3_arch_init(void)$/;"	f
spi3_dma	spi_arch.c	/^static struct spi_periph_dma spi3_dma;$/;"	v	typeref:struct:spi_periph_dma	file:
spi_arch_int_disable	spi_arch.c	/^static void spi_arch_int_disable(struct spi_periph *spi)$/;"	f	file:
spi_arch_int_enable	spi_arch.c	/^static void spi_arch_int_enable(struct spi_periph *spi)$/;"	f	file:
spi_configure_dma	spi_arch.c	/^static void spi_configure_dma(uint32_t dma, uint32_t rcc_dma, uint8_t chan, uint32_t periph_addr, uint32_t buf_addr,$/;"	f	file:
spi_init_slaves	spi_arch.c	/^void spi_init_slaves(void)$/;"	f
spi_lock	spi_arch.c	/^bool_t spi_lock(struct spi_periph *p, uint8_t slave)$/;"	f
spi_next_transaction	spi_arch.c	/^static void spi_next_transaction(struct spi_periph *periph)$/;"	f	file:
spi_periph_dma	spi_arch.c	/^struct spi_periph_dma {$/;"	s	file:
spi_resume	spi_arch.c	/^bool_t spi_resume(struct spi_periph *p, uint8_t slave)$/;"	f
spi_slave_register	spi_arch.c	/^bool_t spi_slave_register(struct spi_periph * periph, struct spi_transaction * trans) {$/;"	f
spi_slave_select	spi_arch.c	/^void spi_slave_select(uint8_t slave)$/;"	f
spi_slave_set_config	spi_arch.c	/^static void spi_slave_set_config(struct spi_periph * periph, struct spi_transaction * trans) {$/;"	f	file:
spi_slave_unselect	spi_arch.c	/^void spi_slave_unselect(uint8_t slave)$/;"	f
spi_start_dma_transaction	spi_arch.c	/^static void spi_start_dma_transaction(struct spi_periph *periph, struct spi_transaction *trans)$/;"	f	file:
spi_submit	spi_arch.c	/^bool_t spi_submit(struct spi_periph *p, struct spi_transaction *t)$/;"	f
spidr	spi_arch.c	/^  uint32_t spidr;                  \/\/\/< SPI DataRegister address for DMA$/;"	m	struct:spi_periph_dma	file:
stmi2c_clear_pending_interrupts	i2c_arch.c	/^static inline void stmi2c_clear_pending_interrupts(uint32_t i2c)$/;"	f	file:
stmi2c_read1	i2c_arch.c	/^static inline enum STMI2CSubTransactionStatus stmi2c_read1(uint32_t i2c, struct i2c_periph *periph,$/;"	f	file:
stmi2c_read2	i2c_arch.c	/^static inline enum STMI2CSubTransactionStatus stmi2c_read2(uint32_t i2c, struct i2c_periph *periph,$/;"	f	file:
stmi2c_readmany	i2c_arch.c	/^static inline enum STMI2CSubTransactionStatus stmi2c_readmany(uint32_t i2c, struct i2c_periph *periph,$/;"	f	file:
stmi2c_send	i2c_arch.c	/^static inline enum STMI2CSubTransactionStatus stmi2c_send(uint32_t i2c, struct i2c_periph *periph,$/;"	f	file:
sys_tick_handler	sys_time_arch.c	/^void sys_tick_handler(void)$/;"	f
sys_time_arch_init	sys_time_arch.c	/^void sys_time_arch_init(void)$/;"	f
sys_time_usleep	sys_time_arch.h	/^static inline void sys_time_usleep(uint32_t us)$/;"	f
tim1_cc_isr	pwm_input_arch.c	/^void tim1_cc_isr(void) {$/;"	f
tim1_up_isr	pwm_input_arch.c	/^void tim1_up_isr(void)$/;"	f
tim2_isr	pwm_input_arch.c	/^void tim2_isr(void) {$/;"	f
tim3_isr	pwm_input_arch.c	/^void tim3_isr(void) {$/;"	f
timeStamp	adc_arch.c	/^  uint32_t timeStamp;$/;"	m	struct:__anon1	file:
tx_chan	spi_arch.c	/^  uint8_t  tx_chan;                \/\/\/< transmit DMA channel (or stream on F4) number$/;"	m	struct:spi_periph_dma	file:
tx_chan_sel	spi_arch.c	/^  uint32_t tx_chan_sel;            \/\/\/< F4 only: actual transmit DMA channel number$/;"	m	struct:spi_periph_dma	file:
tx_dummy_buf	spi_arch.c	/^  uint16_t tx_dummy_buf;           \/\/\/< dummy tx buffer for receive only cases$/;"	m	struct:spi_periph_dma	file:
tx_extra_dummy_dma	spi_arch.c	/^  bool_t tx_extra_dummy_dma;       \/\/\/< extra tx dummy dma flag for tx_len < rx_len$/;"	m	struct:spi_periph_dma	file:
tx_nvic_irq	spi_arch.c	/^  uint8_t  tx_nvic_irq;            \/\/\/< transmit interrupt$/;"	m	struct:spi_periph_dma	file:
uart1_init	uart_arch.c	/^void uart1_init(void)$/;"	f
uart2_init	uart_arch.c	/^void uart2_init(void)$/;"	f
uart3_init	uart_arch.c	/^void uart3_init(void)$/;"	f
uart4_init	uart_arch.c	/^void uart4_init(void)$/;"	f
uart4_isr	uart_arch.c	/^void uart4_isr(void) { usart_isr(&uart4); }$/;"	f
uart5_init	uart_arch.c	/^void uart5_init(void)$/;"	f
uart5_isr	uart_arch.c	/^void uart5_isr(void) { usart_isr(&uart5); }$/;"	f
uart6_init	uart_arch.c	/^void uart6_init(void)$/;"	f
uart_periph_set_baudrate	uart_arch.c	/^void uart_periph_set_baudrate(struct uart_periph *p, uint32_t baud)$/;"	f
uart_periph_set_bits_stop_parity	uart_arch.c	/^void uart_periph_set_bits_stop_parity(struct uart_periph *p, uint8_t bits, uint8_t stop, uint8_t parity)$/;"	f
uart_periph_set_mode	uart_arch.c	/^void uart_periph_set_mode(struct uart_periph *p, bool_t tx_enabled, bool_t rx_enabled, bool_t hw_flow_control)$/;"	f
uart_put_byte	uart_arch.c	/^void uart_put_byte(struct uart_periph *p, uint8_t data)$/;"	f
usart1_isr	uart_arch.c	/^void usart1_isr(void) { usart_isr(&uart1); }$/;"	f
usart2_isr	uart_arch.c	/^void usart2_isr(void) { usart_isr(&uart2); }$/;"	f
usart3_isr	uart_arch.c	/^void usart3_isr(void) { usart_isr(&uart3); }$/;"	f
usart6_isr	uart_arch.c	/^void usart6_isr(void) { usart_isr(&uart6); }$/;"	f
usart_enable_irq	uart_arch.c	/^static inline void usart_enable_irq(uint8_t IRQn)$/;"	f	file:
usart_isr	uart_arch.c	/^static inline void usart_isr(struct uart_periph *p)$/;"	f	file:
usb_lp_can_rx0_isr	can_arch.c	/^void usb_lp_can_rx0_isr(void)$/;"	f
